pro rdmag, infile, w, s, vsini, vrt, sint=sint
;Read output from sme_mag code in the form used for the AAS talk.
;Inputs:
; infile  (string) name of ".prf" file generated by synthmag.
; x  (vector) wavelength scale for output spectrum
; vsini   (scalar) desired vsini (in km/s) for disk integration.
; vrt     (scalar) radial-tangential macroturbulence (in km/s).
;Outputs:
; y (vector(2001)) flux spectrum constructed from intensities in file.
;History:
; 06-Jun-96 Valenti  Wrote.
; 10-Apr-97 Piskunov Added all stokes parameters and the creation
;                    of the output files,
if n_params() lt 4 then begin
  print, 'syntax: rdmag, infile, w, s, vsini, vrt [,sint=sint]'
  retall
endif

;Program parameters.
  nw = n_elements(w)
  wmin = min(w, max=wmax)
  meanw  = (wmin + wmax) / 2.0
  deltaw = (wmax - wmin) / (nw-1)
  deltav = 2.99792d5 * deltaw / meanw

  openr, unit, infile, /get

;Copy line list.
  nlines=0
  readf, unit, nlines 

  sbuff = ''
  for i=1,nlines do begin
    readf, unit, sbuff
  endfor

;Predefine variable types for use in read statements below.
  nx = 0
  imu = 0
  xmu = 0d0
  cfirst = 0d0
  clast  = 0d0

;Loop thru mu angles.
  readf, unit, nmu

;Init internal arrays.
  mu = dblarr(nmu)
  c1 = dblarr(nmu)
  c2 = dblarr(nmu)

  for iloop=0, nmu-1 do begin

;Read header information.
    readf, unit, imu, xmu
    readf, unit, xfirst, cfirst, xlast, clast
    readf, unit, nx

;Init outputs arrays the first time through the loop.
    if iloop eq 0 then begin
      sint = dblarr(nw, nmu)
    endif

;Initialize spectrum variables.
    x = dblarr(nx)
    y = dblarr(nx)
    Q = dblarr(nx)
    U = dblarr(nx)
    V = dblarr(nx)

;Read spectrum.
    readf, unit, x, y, Q, U, V
    ix=uniq(x)
    x=x(ix)
    y=y(ix)

;Load data from file into arrays.
    mu(iloop) = xmu
    c1(iloop) = cfirst
    c2(iloop) = clast
    sint(*,iloop) = interpol(y, x, w)
  endfor

;Close file.
  free_lun, unit

;Do the disk integration.
  s = rtint(mu, sint, deltav, vsini, vrt)

;Normalize continuum.
  c1avg = !dpi * total(c1) / nmu
  c2avg = !dpi * total(c2) / nmu
  c = c1avg + (c2avg - c1avg) * dindgen(nw) / (nw-1)
  s = s / c

;Close file.
  free_lun, unit

end
